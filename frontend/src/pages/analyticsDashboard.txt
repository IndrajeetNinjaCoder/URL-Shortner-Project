import React, { useEffect, useState } from 'react';
// import axios from 'axios';
// import { Line, Pie } from 'react-chartjs-2';
// import { Card, CardContent } from '../components/ui/Card';
// import { Input } from '../components/ui/Input'
// import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../components/ui/Table';
// import { Spinner } from '../components/ui/Spinner';
// import QRCode from 'qrcode.react';

const API_BASE = 'http://localhost:5000'; // your backend URL

export default function AnalyticsDashboard() {
//   const [urls, setUrls] = useState([]);
  const [search, setSearch] = useState('');
//   const [loading, setLoading] = useState(true);
//   const [filtered, setFiltered] = useState([]);

//   useEffect(() => {
//     fetchUrls();
//   }, []);

//   const fetchUrls = async () => {
//     setLoading(true);
//     try {
//       const res = await axios.get(`${API_BASE}/url/all`, {
//         headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
//       });
//       setUrls(res.data);
//       setFiltered(res.data);
//     } catch (err) {
//       console.error('Failed to fetch URLs', err);
//     }
//     setLoading(false);
//   };

//   const handleSearch = (value) => {
//     setSearch(value);
//     const lower = value.toLowerCase();
//     setFiltered(urls.filter((u) => u.redirectURL.toLowerCase().includes(lower)));
//   };

//   const clickChartData = {
//     labels: filtered.map((u) => new Date(u.createdAt).toLocaleDateString()),
//     datasets: [
//       {
//         label: 'Clicks',
//         data: filtered.map((u) => u.totalClicks),
//         borderColor: 'rgb(59, 130, 246)',
//         fill: false,
//       },
//     ],
//   };

//   const deviceBreakdown = {
//     labels: ['Mobile', 'Desktop', 'Tablet'],
//     datasets: [
//       {
//         data: [40, 30, 30], // Replace with actual analytics
//         backgroundColor: ['#4F46E5', '#16A34A', '#DC2626'],
//       },
//     ],
//   };

  return (
    <div className="p-6 space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-semibold">Analytics Dashboard</h1>
        <Input placeholder="Search by URL" value={search} onChange={(e) => handleSearch(e.target.value)} className="w-1/3" />
      </div>

      {loading ? (
        <div className="flex justify-center py-10">
          <Spinner />
        </div>
      ) : (
        <>
          <Card>
            <CardContent className="overflow-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Original URL</TableHead>
                    <TableHead>Short URL</TableHead>
                    <TableHead>Clicks</TableHead>
                    <TableHead>Created</TableHead>
                    <TableHead>Expires</TableHead>
                    <TableHead>QR</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filtered.map((url) => (
                    <TableRow key={url._id}>
                      <TableCell>{url.redirectURL}</TableCell>
                      <TableCell>
                        <a className="text-blue-600 underline" href={`${API_BASE}/${url.shortID}`} target="_blank" rel="noreferrer">
                          {`${API_BASE}/${url.shortID}`}
                        </a>
                      </TableCell>
                      <TableCell>{url.totalClicks || 0}</TableCell>
                      <TableCell>{new Date(url.createdAt).toLocaleDateString()}</TableCell>
                      <TableCell>{url.expirationDate ? new Date(url.expirationDate).toLocaleDateString() : 'N/A'}</TableCell>
                      <TableCell>
                        <QRCode value={`${API_BASE}/${url.shortID}`} size={50} />
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardContent>
                <h2 className="text-lg font-medium mb-4">Clicks Over Time</h2>
                <Line data={clickChartData} />
              </CardContent>
            </Card>

            <Card>
              <CardContent>
                <h2 className="text-lg font-medium mb-4">Device Breakdown</h2>
                <Pie data={deviceBreakdown} />
              </CardContent>
            </Card>
          </div>
        </>
      )}
    </div>
  );
}
